// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/luhn-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Luhn_Validate_FullMethodName = "/luhn.service.Luhn/Validate"
)

// LuhnClient is the client API for Luhn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LuhnClient interface {
	Validate(ctx context.Context, in *LuhnServiceRequest, opts ...grpc.CallOption) (*LuhnServiceResponse, error)
}

type luhnClient struct {
	cc grpc.ClientConnInterface
}

func NewLuhnClient(cc grpc.ClientConnInterface) LuhnClient {
	return &luhnClient{cc}
}

func (c *luhnClient) Validate(ctx context.Context, in *LuhnServiceRequest, opts ...grpc.CallOption) (*LuhnServiceResponse, error) {
	out := new(LuhnServiceResponse)
	err := c.cc.Invoke(ctx, Luhn_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuhnServer is the server API for Luhn service.
// All implementations must embed UnimplementedLuhnServer
// for forward compatibility
type LuhnServer interface {
	Validate(context.Context, *LuhnServiceRequest) (*LuhnServiceResponse, error)
	mustEmbedUnimplementedLuhnServer()
}

// UnimplementedLuhnServer must be embedded to have forward compatible implementations.
type UnimplementedLuhnServer struct {
}

func (UnimplementedLuhnServer) Validate(context.Context, *LuhnServiceRequest) (*LuhnServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedLuhnServer) mustEmbedUnimplementedLuhnServer() {}

// UnsafeLuhnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LuhnServer will
// result in compilation errors.
type UnsafeLuhnServer interface {
	mustEmbedUnimplementedLuhnServer()
}

func RegisterLuhnServer(s grpc.ServiceRegistrar, srv LuhnServer) {
	s.RegisterService(&Luhn_ServiceDesc, srv)
}

func _Luhn_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LuhnServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuhnServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luhn_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuhnServer).Validate(ctx, req.(*LuhnServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Luhn_ServiceDesc is the grpc.ServiceDesc for Luhn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Luhn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "luhn.service.Luhn",
	HandlerType: (*LuhnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Luhn_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/luhn-service.proto",
}
